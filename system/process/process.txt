/*
 * 进程
 */

  程序：是静态的，存放在磁盘上的可执行文件
  进程：是动态的，是运行在内存中的程序的执行实例

  程序是一些指令的有序集合，而进程是程序执行的过程，进程是程序的一次执行过程。
  进程的状态是动态变化的，其包括进程的创建、调度和消亡。
  只要程序运行，此时就是进程，程序每运行一次，就会创建一个进程。

  在Linux系统中，进程是管理事务的基本单元。
  进程拥有自己独立的处理环境和系统资源（处理器、存储器、I/O设备、数据、程序）
  可使用exec函数由内核将程序读入内存，使其执行起来成为一个进程



  进程的状态及转换

  进程有三种状态：
  就绪态：进程已具备执行的一切条件，正在等待分配CPU的处理时间
  执行态：该进程正在占用CPU运行
  等待态：进程因不具备某些执行条件而暂时无法继续执行的状态


                      进程调度         +-----------------------+    事件发生
                  +------------------- |        就绪态         |<-------------+
                  |      +-----------> +-----------------------+              |
                  V      |  时间片到                                          |
           +-----------------------+         等待某事件发生        +-----------------------+
           |        执行态         |  -------------------------->  |        等待态         |
           +-----------------------+                               +-----------------------+

  进程调度机制：时间片轮转，上下文切换
  时间片大概就是一个进程运行的时间，CPU的一个核每次只能执行一个进程，所以每一个进程都是执行一小会就换一个进程，
  如此反复执行操作系统中运行的进程，一个进程执行一小会后就会到就绪态，等待下一次继续执行



  进程控制块

  进程控制块就是用于保存一个进程信息的结构体，又称之为PCB
  OS是根据PCB来对并发执行的进程进行控制和管理的。系统在创建一个进程的时候会开辟一段内存空间
  存放与此进程相关的PCB数据结构。
  PCB是操作系统中最重要的记录型数据结构。PCB中记录了用于描述进程进展情况及控制进程运行所需要的全部信息。
  PCB是进程存在的唯一标志，在Linux中PCB存放在task_struct结构体中。
  task_struct结构体保存在/usr/src/linux内核版本/include/linux/sched.h，我这系统没有这个目录，只有
  在/usr/include/linux/sched.h文件存在些宏定义的玩意
  PCB结构体中的部分数据
     调度数据：进程的状态、标志、优先级、调度策略等
     时间数据：创建该进程的时间、在用户态的运行时间、在内核态的运行时间等
     文件系统数据：umask掩码、文件描述符表等。内存数据、进程上下文、进程标识（进程号）



  进程号

  每个进程都由一个进程号来识别，其类型为pid_t，进程号的范围：0~32767。
  进程号总是唯一的，但进程号可以重用。当没有进程使用这个进程号时，该进程号就可以被其它进程使用。

  linux中进程号从0开始，进程号为0和1的进程由内核创建。其中进程号为0的进程通常是调度进程，常被称为交换进程(swapper)。
  进程号为1的进程通常是init进程，出调度进程外，在linux中所有进程都由init进程直接或间接创建。

  进程的查询可以使用命令ps ajx(显示所有进程)，ps(显示当前执行的进程)
  PPID    PID   PGID    SID TTY       TPGID STAT   UID   TIME COMMAND
  查询列表中PPID表示父进程号，PID表示当前进程号，PGID表示进程组ID，TIME表示该进程执行了的时间，COMMAND表示进程名
  UID表示所有者ID

















