/*
 * author: inkXu
 * date:   2022.9.3
 *
 * 信号灯集（信号量）
 */

  概念

  信号量广泛用于进程或线程间的同步和互斥，信号量本质上是一个非负的整数计数器，它被用来控制对公众资源的访问
  编程时可根据操作信号量的值的结果判断是否对公众资源具有访问的权限，当信号量值大于0时，则可以访问，否则将阻塞

  信号量又称之为PV操作，PV原语是对信号量的操作，一次P操作使信号量sem减1，一次V操作使信号量sem加1，对于P操作，
  若是信号量的sem值小于等于0，则P操作就会阻塞，如果信号量的值大于0，才可以执行P操作对sem进程减1操作

  信号量主要用于进程或线程间同步和互斥这两种典型情况
  1)若用于互斥，几个进程（或线程）往往只能设置一个信号量
  2)若用于同步操作，往往会设置多个信号量，并且安排不同的初始值，来实现它们之间的执行顺序

  信号量用于互斥
  例：程序开始将信号量sem设置为1，一个线程执行的时候，先执行P操作，对sem减1，另一个线程开始处也执行P操作，但另
      一个线程已经执行了P操作，sem减1，现在为0，这时另一个线程就会发生阻塞，等先执行线程执行完毕，该线程结束前
      再执行V操作，对sem进程加1操作，这时另一个线程就可以开始执行，这样就是线程的互斥

  信号量用于同步
  例：程序开始时设置两个信号量sem1和sem2，sem1设置为1，sem2设置为0，一个线程执行的时候，先执行P操作，对sem1减1，
      等该线程执行完毕后，对sem2进行V操作，这时，另一个线程就可以开始执行，待该线程执行完毕后，对sem1进行V操作，
      这时前一个线程就可以继续执行，这样就是线程的同步


  信号量的初始化

  int sem_init(sem_t *sem, int pshared, unsigned int value);
  创建一个信号量并初始化它的值
  sem：信号量的地址，信号量的类型为sem_t
  pshared：等于0，信号量在线程间共享，不等于0，信号量在进程间不共享
  value：信号量的初始值
  成功返回0，失败返回-1


  信号量的P操作

  int sem_wait(sem_t *sem);
  将信号量的值减1，若是信号量的值小于等于0，则此函数会引起调用者阻塞
  sem：信号量的地址
  成功返回0，失败返回-1

  int sem_trywait(sem_t *sem);
  将信号量的值减1，若是信号量的值小于等于0，则对信号量的操作失败，函数立即返回，非阻塞
  sem：信号量的地址
  成功返回0，失败返回-1


  信号量的V操作

  int sem_post(sem_t *sem);
  将信号量的值加1，并发出信号等待线程
  sem：信号量的地址
  成功返回0，失败返回-1


  get the value of a semaphore

  int sem_getvalue(sem_t *sem, int *sval);
  获取sem标识的信号量的值，保存在sval中
  sem：信号量的地址
  sval：保存信号量的地址
  成功返回0，失败返回-1


  信号量的销毁 destroy an unnamed semaphore

  int sem_destroy(sem_t *sem);
  将sem标识的信号量销毁
  sem：信号量的地址
  成功返回0，失败返回-1
















