/*
 * author: inkXu
 * date:   2022.8.28
 *
 * 线程
 */

  概念

  每个进程都拥有自己的数据段、代码段和堆栈段，这就造成进程在进行创建、切换、撤销操作时，需要较大的系统开销

  为了减少系统开销，从进程中演化出了线程

  线程存在于进程中，共享进程资源

  线程是进程中的独立控制流，由环境（包括寄存器组和程序计数器）和一系列的执行指令组成。

  每个进程有一个地址空间和一个控制线程(主控线程)

                      +------线程A栈
                      |
                      +------线程B栈
                      |
  进程----------------+------堆区
                      |
                      +------数据区
                      |
                      +------代码区
                      |
                      +------BSS区




  线程和进程的比较

  调度：
        线程是CPU调度和分派的基本单位

  拥有资源：
        进程是系统中程序执行和资源分配的基本单位。
        线程自己一般不拥有资源（除了必不可少的程序计数器，一组寄存器和栈），但他可以去访问所属进程的资源，
        如进程代码段，数据段以及系统资源（已打开的文件，I/O设备等）

  系统开销：
        同一个进程中的多个线程可共享同一地址空间，因此它们之间的同步和通信的实现也变得比较容易
        在进程切换时，涉及到整个当前进程CPU环境的保护以及新被调度运行的进程的CPU环境的设置；而
        线程切换只需要保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作，从而能更有效地
        使用系统资源和提高系统的吞吐量

  并发性：
        不仅进程可以并发执行，而且在一个进程中的多个线程直接也可以并发执行(同时运行，时间片轮转，上下切换)

  总结：
        一般把线程称之为轻量级进程
        一个进程中可以创建多个线程，多个线程共享一个进程的资源
        每一个进程的创建系统会分配给其4G的虚拟内存，3G用户空间是私有的，所以进程切换时，用户空间也会切换
        所以会增加系统开销，而一个进程中的多个线程共享一个进程的资源，所以线程的切换不用切换这些资源，效
        率会更高
        线程的调度机制和进程是一样的，多个线程来回切换运行



  多线程的用处

  多任务程序的设计
         一个程序可能要处理不同应用，要处理多种任务，如果开发不同的进程来处理，系统开销很大，数据共享，程序
         结构都不方便，这时可使用多线程编程方法，如QQ、微信

  并发程序设计
         一个任务可能分成不同的步骤去完成，这些不同的步骤之间可能是松散耦合，可能通过线程的互斥，同步并发完
         成。这样可以为不同的任务步骤建立线程

  网络程序设计
         为提高网络的利用率，我们可能使用多线程，对每个连接用一个线程去处理

  数据共享
         同一个进程中的不同线程共享进程的数据空间，方便不同线程间的数据共享

  在多CPU系统中，实现真正的并行








































