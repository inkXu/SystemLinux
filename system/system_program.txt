
  系统编程

  操作系统的职责
     操作系统用来管理所有的资源，并将不同的设备和不同的程序关联起来。
  什么是Linux系统编程
     在有操作系统的环境下编程，并使用操作系统提供的系统调用和各种库，对系统资源进行访问。

  系统编程主要就是为了让用户能够更方便和更好的操作硬件设备，并且对硬件设备也起到保护作用，
  我们写的程序，本质就是对硬件设备的操作，所以操作系统提供接口可以对硬件进行操作，这就是系统编程


  系统调用概述

  本质都是要对硬件设备进行操作，但是linux操作系统在硬件上设置了内核，也就是只有内核才可以直接操作硬件设
  备，如果想操作内核，需要调用内核的系统调用，如果需要调用内核的系统调用，有三种方法：
  第一种：shell，用户通过shell命令，由shell的解释器操作内核的系统调用
  第二种：库函数，用户通过应用层库函数的接口，比如fread等对内核的系统调用进行操作
  第三种：应用层系统调用，它可以直接对内核的系统调用进行操作

  系统调用是操作系统提供给用户程序的一组"特殊"函数接口。

  在Linux系统中，是通过内核来操作硬件的，而内核的操作是通过系统调用（system call）来实现的，系统调用就是
  一些接口，通过这些接口来操作内核。system call可以被应用程序直接调用，或是通过shell进行调用，还可以通过
  库函数进行调用。


  系统调用按照功能逻辑大致可分为

  进程控制、进程间通信、文件系统控制、系统控制、内存管理、网络管理、socket控制、用户管理


  系统调用返回值

  通常，一个负的返回值表示错误，0表示成功。错误信息存放在全局变量errno中，可以使用perror打印错误信息


  文件描述符

  文件描述符是非负整数，打开现存文件或新建文件时，系统（内核）会返回一个文件描述符，文件描述符用来指定
  已打开的文件。
  #define STDIN_FILENO    0      //标准输入的文件描述符
  #define STDOUT_FILENO   1      //标准输出的文件描述符
  #define STDERR_FILENO   2      //标准错误的文件描述符
  程序运行后这三个文件描述符是默认打开的。若是在打开一个文件，那么它的文件描述符是3，一般从小到大依次创建


  系统调用和库函数的区别

  库函数本质上还是调用了system call中的接口，就是使用库函数时，它与系统调用之间有一个缓冲区，待缓冲区满
  了的时候，这时才会调用system call中的接口，可以减少system call调用的次数，若是直接使用system call，每
  次使用其中的接口，都要从系统调用层到内核层，这样转换会更加耗费内存








